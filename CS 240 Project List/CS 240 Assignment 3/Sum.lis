     1                                  ;****************************************************************************************************************************
     2                                  ;Create a program in mixed languages (C, C++, and of course x86) that will compute the sum of the float numbers in an array.                                                                                                                        *
     3                                  ;This file is part of the software program "Sum of an array".                                                        *
     4                                  ;Sum of an Array is free software: you can redistribute it and/or modify it under the terms of the GNU General Public*
     5                                  ;License version 3 as published by the Free Software Foundation.                                                            *
     6                                  ;Sum of an Array is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the       *
     7                                  ;implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more      *
     8                                  ;details.  A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.                  *
     9                                  ;****************************************************************************************************************************
    10                                  
    11                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    12                                  ;
    13                                  ;Author information
    14                                  ;  Author name: Richard Gresham
    15                                  ;  Author email: rgresham@csu.fullerton.edu
    16                                  ;
    17                                  ;Program information
    18                                  ;  Program name: Sum of a array
    19                                  ;  Programming languages: One modules in C++ and one module in X86
    20                                  ;  Date program began: 2021-Mar-06
    21                                  ;  Date of last update: 2021-Mar-21
    22                                  ;  Date comments upgraded: 2021-Mar-21
    23                                  ;  Date open source license added: 2021-Mar-06
    24                                  ;  Files in this program: Control.asm, Display.cpp, Fill.asm, Main.c, Script.sh, Sum.asm
    25                                  ;  Status: Finished.
    26                                  ;  References consulted: CS 240 class notes/lectures/Professor examples ie. floatio. Seyfarth, Chapter 18
    27                                  ;  Future upgrade possible: software to reject non-floats.
    28                                  ;
    29                                  ;Purpose
    30                                  ;  Create a program in mixed languages (C, C++, and of course x86) that will ask for user input to fill an array.
    31                                  ;  The program will prevent array overfill and will display the array and return the sum of array to main.
    32                                  ;  
    33                                  ;
    34                                  ;This file
    35                                  ;  File name: Sum.asm
    36                                  ;  Language: X86 with Intel syntax.
    37                                  ;  Max page width: 132 columns
    38                                  ;  Assemble: nasm -f elf64 -l Fill.asm
    39                                  
    40                                  ;=====================================================================================================================================
    41                                  extern printf
    42                                  extern scanf
    43                                  
    44                                  global Sum
    45                                  
    46                                  segment .data
    47 00000000 74686520616E737765-     answer db "the answer is %lf" , 10 ,0
    47 00000009 7220697320256C660A-
    47 00000012 00                 
    48                                  
    49                                  
    50                                  segment .bss
    51                                  
    52                                  segment .text
    53                                  
    54                                  
    55                                  
    56                                  Sum:
    57                                  
    58                                  
    59                                  ;Prolog ===== Insurance for any caller of this assembly module ========================================================
    60                                  ;Any future program calling this module that the data in the caller's GPRs will not be modified. ;useful to always do
    61 00000000 55                      push rbp
    62 00000001 4889E5                  mov  rbp,rsp
    63 00000004 57                      push rdi                                                    ;Backup rdi
    64 00000005 56                      push rsi                                                    ;Backup rsi
    65 00000006 52                      push rdx                                                    ;Backup rdx
    66 00000007 51                      push rcx                                                    ;Backup rcx
    67 00000008 4150                    push r8                                                     ;Backup r8
    68 0000000A 4151                    push r9                                                     ;Backup r9
    69 0000000C 4152                    push r10                                                    ;Backup r10
    70 0000000E 4153                    push r11                                                    ;Backup r11
    71 00000010 4154                    push r12                                                    ;Backup r12
    72 00000012 4155                    push r13                                                    ;Backup r13
    73 00000014 4156                    push r14                                                    ;Backup r14
    74 00000016 4157                    push r15                                                    ;Backup r15
    75 00000018 53                      push rbx                                                    ;Backup rbx
    76 00000019 9C                      pushf                                                       ;Backup rflags
    77                                  
    78                                  ;Registers rax, rip, and rsp are usually not backed up.
    79                                  
    80                                  
    81 0000001A 4989FF                  mov r15, rdi ; is my array
    82 0000001D 4989F6                  mov r14, rsi ; how much we filled the array.
    83                                  
    84 00000020 41BD00000000            mov r13, 0   ;keeps track to make sure we don't go outside the size of what we filled.
    85                                  
    86 00000026 B800000000              mov rax, 0
    87 0000002B F24C0F2AF8              cvtsi2sd xmm15, rax
    88                                  
    89                                  
    90                                  begin_loop:
    91 00000030 4D39F5                  cmp r13, r14 ;compares how much we filled to our counter, if equal then we went through all of the array we filled.
    92 00000033 7D10                    jge finish_loop
    93                                  
    94                                  
    95 00000035 F2470F1034EF            movsd xmm14, [r15 + 8* r13]          ;moves our value in array into our xmm14 register so we can do float point math.
    96                                  
    97 0000003B F2450F58FE              addsd xmm15, xmm14
    98 00000040 49FFC5                  inc r13  ;increase our counter.
    99                                  
   100 00000043 EBEB                    jmp begin_loop
   101                                  
   102                                  
   103                                  
   104                                  finish_loop:
   105                                  
   106 00000045 F2410F10C7              movsd xmm0, xmm15 ;stores our sum into xmm0 which will be returned to our Control.asm
   107                                  
   108                                  
   109                                  
   110                                  
   111                                  
   112                                  
   113                                  ;===== Restore original values to integer registers ===================================================================
   114 0000004A 9D                      popf                                                        ;Restore rflags
   115 0000004B 5B                      pop rbx                                                     ;Restore rbx
   116 0000004C 415F                    pop r15                                                     ;Restore r15
   117 0000004E 415E                    pop r14                                                     ;Restore r14
   118 00000050 415D                    pop r13                                                     ;Restore r13
   119 00000052 415C                    pop r12                                                     ;Restore r12
   120 00000054 415B                    pop r11                                                     ;Restore r11
   121 00000056 415A                    pop r10                                                     ;Restore r10
   122 00000058 4159                    pop r9                                                      ;Restore r9
   123 0000005A 4158                    pop r8                                                      ;Restore r8
   124 0000005C 59                      pop rcx                                                     ;Restore rcx
   125 0000005D 5A                      pop rdx                                                     ;Restore rdx
   126 0000005E 5E                      pop rsi                                                     ;Restore rsi
   127 0000005F 5F                      pop rdi                                                     ;Restore rdi
   128 00000060 5D                      pop rbp                                                     ;Restore rbp
   129                                  
   130                                  
   131                                  
   132                                  
   133                                  
   134 00000061 C3                      ret
   135                                  
   136                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
   137                                  
