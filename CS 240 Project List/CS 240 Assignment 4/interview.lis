     1                                  ;****************************************************************************************************************************
     2                                  ;Create a program in mixed languages (C, C++, and of course x86) that will ask for user input of floats into a an array of definitive size
     3                                  ;preventing overfill if user enters in too many values. It will then display and compute the sum of the array and return it to main.*
     4                                  ;Sum of an Array is free software: you can redistribute it and/or modify it under the terms of the GNU General Public       *
     5                                  ;License version 3 as published by the Free Software Foundation.                                                            *
     6                                  ;Sum of an Array is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the              *
     7                                  ;implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more      *
     8                                  ;details.  A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.                  *
     9                                  ;****************************************************************************************************************************
    10                                  
    11                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    12                                  ;
    13                                  ;Author information
    14                                  ;  Author name: Richard Gresham
    15                                  ;  Author email: rgresham@csu.fullerton.edu
    16                                  ;
    17                                  ;Program information
    18                                  ;  Program name: Interview 
    19                                  ;  Programming languages: One modules in C++ and one module in X86
    20                                  ;  Date program began: 2021-April-15
    21                                  ;  Date of last update: 2021-April-25
    22                                  ;  Date comments upgraded: 2021-April-25
    23                                  ;  Date open source license added: 2021-Apr-15
    24                                  ;  Files in this program: Main.cpp, interview.asm r.sh
    25                                  ;  Status: Finished.
    26                                  ;  References consulted: CS 240 class notes/lectures/Professor 
    27                                  ;  Future upgrade possible: possible choices for other majors
    28                                  ;
    29                                  ;Purpose
    30                                  ;  Create a program in mixed languages (C++ and of course x86) that will ask for user to answer questions in an interview
    31                                  ; and have different endings depending upon questions asked, aka chris sawyer.
    32                                  ;  
    33                                  ;
    34                                  ;This file
    35                                  ;  File name: interview.asm
    36                                  ;  Language: X86 with Intel syntax.
    37                                  ;  Max page width: 132 columns
    38                                  ;  Assemble: nasm -f elf64 -l interview.asm
    39                                  
    40                                  
    41                                  ;===== Begin code area ========================================================================================================
    42                                  
    43                                  extern printf
    44                                  extern scanf
    45                                  extern getchar
    46                                  
    47                                  global interview
    48                                  
    49                                  Segment .data
    50 00000000 48656C6C6F20257320-      messageintro db "Hello %s I am Ms Fenster. The interview will begin now." ,10 ,0
    50 00000009 4920616D204D732046-
    50 00000012 656E737465722E2054-
    50 0000001B 686520696E74657276-
    50 00000024 6965772077696C6C20-
    50 0000002D 626567696E206E6F77-
    50 00000036 2E0A00             
    51                                  
    52 00000039 68692E0A00              test1 db "hi." ,10 ,0
    53 0000003E 416C72696768742E20-     resistancequestion db "Alright. Now we will work on your electricity." , 10, 0
    53 00000047 4E6F77207765207769-
    53 00000050 6C6C20776F726B206F-
    53 00000059 6E20796F757220656C-
    53 00000062 656374726963697479-
    53 0000006B 2E0A00             
    54 0000006E 506C6561736520656E-     resistance1 db "Please enter the resistance of circuit #1 in ohms: " , 10 ,0
    54 00000077 746572207468652072-
    54 00000080 6573697374616E6365-
    54 00000089 206F66206369726375-
    54 00000092 697420233120696E20-
    54 0000009B 6F686D733A200A00   
    55 000000A3 506C6561736520656E-     resistance2 db "Please enter the resistance of circuit #2 in ohms: " , 10 ,0
    55 000000AC 746572207468652072-
    55 000000B5 6573697374616E6365-
    55 000000BE 206F66206369726375-
    55 000000C7 697420233220696E20-
    55 000000D0 6F686D733A200A00   
    56 000000D8 256C6600                floatformat db "%lf"  ,0
    57 000000DC 256C6600                floatformat2 db "%lf"  ,0
    58 000000E0 54686520746F74616C-     totalresistance db "The total resistance is %.12lf Ohms." , 10 ,0
    58 000000E9 20726573697374616E-
    58 000000F2 636520697320252E31-
    58 000000FB 326C66204F686D732E-
    58 00000104 0A00               
    59 00000106 257300                  charformat db "%s"  ,0
    60 00000109 5765726520796F7520-     computerscience db "Were you a computer science major (y or n)?" ,10, 0
    60 00000112 6120636F6D70757465-
    60 0000011B 7220736369656E6365-
    60 00000124 206D616A6F72202879-
    60 0000012D 206F72206E293F0A00 
    61                                  
    62 00000136 576F772120256C6620-      wowmessage db "Wow! %lf That's a lot of cash. Who do you think you are, Chris Sawyer(y or n)?",0
    62 0000013F 546861742773206120-
    62 00000148 6C6F74206F66206361-
    62 00000151 73682E2057686F2064-
    62 0000015A 6F20796F7520746869-
    62 00000163 6E6B20796F75206172-
    62 0000016C 652C20436872697320-
    62 00000175 536177796572287920-
    62 0000017E 6F72206E293F00     
    63                                  
    64 00000185 5468616E6B20596F75-     exitmessage db "Thank You. Please follow the exit signs to the front desk." , 10 ,0
    64 0000018E 2E20506C6561736520-
    64 00000197 666F6C6C6F77207468-
    64 000001A0 652065786974207369-
    64 000001A9 676E7320746F207468-
    64 000001B2 652066726F6E742064-
    64 000001BB 65736B2E0A00       
    65                                  
    66                                  
    67                                  
    68                                  Segment .bss
    69 00000000 <res 00000190>          myname resq 50; 
    70                                  
    71                                  Segment .text
    72                                  
    73                                  
    74                                  
    75                                  interview:
    76                                  
    77                                  
    78                                  
    79                                  ;Prolog ===== Insurance for any caller of this assembly module ========================================================
    80                                  ;Any future program calling this module that the data in the caller's GPRs will not be modified. ;useful to always do
    81 00000000 55                      push rbp
    82 00000001 4889E5                  mov  rbp,rsp
    83 00000004 57                      push rdi                                                    ;Backup rdi
    84 00000005 56                      push rsi                                                    ;Backup rsi
    85 00000006 52                      push rdx                                                    ;Backup rdx
    86 00000007 51                      push rcx                                                    ;Backup rcx
    87 00000008 4150                    push r8                                                     ;Backup r8
    88 0000000A 4151                    push r9                                                     ;Backup r9
    89 0000000C 4152                    push r10                                                    ;Backup r10
    90 0000000E 4153                    push r11                                                    ;Backup r11
    91 00000010 4154                    push r12                                                    ;Backup r12
    92 00000012 4155                    push r13                                                    ;Backup r13
    93 00000014 4156                    push r14                                                    ;Backup r14
    94 00000016 4157                    push r15                                                    ;Backup r15
    95 00000018 53                      push rbx                                                    ;Backup rbx
    96 00000019 9C                      pushf                                                       ;Backup rflags
    97                                  
    98                                  ;Registers rax, rip, and rsp are usually not backed up.
    99 0000001A 6A00                    push qword 0
   100                                  
   101 0000001C 4989FE                  mov r14, rdi  ;holds my name
   102                                  
   103 0000001F F2440F10F8              movsd xmm15, xmm0 ;holds the money
   104                                  
   105                                  ;welcome prompt with users name in it.
   106 00000024 6A00                    push qword 0
   107 00000026 B800000000              mov rax, 0
   108 0000002B 48BF-                   mov rdi, messageintro ;hello message.
   108 0000002D [0000000000000000] 
   109 00000035 4C89F6                  mov rsi, r14 ;this is our first parameter holding our name, so it will print the message with our name.
   110 00000038 E8(00000000)            call printf
   111 0000003D 58                      pop rax
   112                                  
   113                                  
   114                                  
   115                                  
   116                                  ;prompt exclaiming surprise at price of items.
   117 0000003E 6A00                    push qword 0
   118 00000040 B801000000              mov rax, 1
   119 00000045 48BF-                   mov rdi, wowmessage ;prompt asking if your chris sawyer or not.
   119 00000047 [3601000000000000] 
   120 0000004F F2410F10C7              movsd xmm0, xmm15   ;prints out message with the money that the interviewie listed.
   121 00000054 E8(00000000)            call printf
   122                                  
   123 00000059 58                      pop rax
   124                                  
   125                                  
   126 0000005A 6A00                    push qword 0
   127 0000005C B801000000              mov rax, 1
   128 00000061 48BF-                   mov rdi, charformat ;sets up scan to charformat so that it can take a char.
   128 00000063 [0601000000000000] 
   129 0000006B 4889E6                  mov rsi, rsp
   130 0000006E E8(00000000)            call scanf 
   131 00000073 58                      pop rax
   132 00000074 41BF79000000            mov r15, 'y' ;no use for this command as I didn't use it in compare.  
   133                                  
   134 0000007A 4883F879                cmp rax, 'y' ;comparing what the user input with the 'y' char to indicate yes.
   135 0000007E 0F8425010000            je Chris_Sawyer ;if yes this will jump past the resistance part.
   136                                  
   137 00000084 B800000000              mov rax, 0
   138 00000089 48BF-                   mov rdi, resistancequestion ;props up the question about resistance.
   138 0000008B [3E00000000000000] 
   139 00000093 E8(00000000)            call printf
   140                                  
   141                                  ;-----prompt for first resistance---------
   142                                  
   143 00000098 B800000000              mov rax, 0
   144 0000009D 48BF-                   mov rdi, resistance1 ;refers to question please enter first resistance.
   144 0000009F [6E00000000000000] 
   145 000000A7 E8(00000000)            call printf
   146                                  
   147                                  
   148                                  
   149 000000AC 6A00                    push qword 0
   150 000000AE B800000000              mov rax, 0
   151 000000B3 48BF-                   mov rdi, floatformat ;sets up answer in float format.
   151 000000B5 [D800000000000000] 
   152 000000BD 4889E6                  mov rsi, rsp
   153 000000C0 E8(00000000)            call scanf
   154 000000C5 F2440F103424            movsd xmm14, [rsp] ;holds first resistance
   155 000000CB 58                      pop rax
   156                                  
   157                                  ;----------prompt for second resistance--------
   158                                  
   159 000000CC B800000000              mov rax, 0
   160 000000D1 48BF-                   mov rdi, resistance2 ;second resistance question
   160 000000D3 [A300000000000000] 
   161 000000DB E8(00000000)            call printf
   162                                  
   163                                  
   164 000000E0 6A00                    push qword 0
   165 000000E2 B801000000              mov rax, 1
   166 000000E7 48BF-                   mov rdi, floatformat2 ;sets up in float format.
   166 000000E9 [DC00000000000000] 
   167 000000F1 4889E6                  mov rsi, rsp
   168 000000F4 E8(00000000)            call scanf
   169 000000F9 F2440F102C24            movsd xmm13, [rsp] ;holds our second resistance
   170 000000FF 58                      pop rax
   171                                  
   172                                  ;---------math part--------------------------------
   173                                  
   174                                  ;add resistance to get total
   175 00000100 B801000000              mov rax, 1
   176 00000105 F24C0F2AE0              cvtsi2sd xmm12, rax ;stored 1.0
   177 0000010A B801000000              mov rax, 1
   178 0000010F F24C0F2AD8              cvtsi2sd xmm11, rax ;stored 1.0
   179 00000114 B801000000              mov rax, 1
   180 00000119 F24C0F2AD0              cvtsi2sd xmm10, rax ;stored 1.0
   181                                  
   182                                  ;1/R = 1/r1 + 1/r2
   183 0000011E F2450F5EE5              divsd  xmm12, xmm13 ; 1/r1 
   184                                  
   185 00000123 F2450F5EDE              divsd xmm11, xmm14 ; 1/r2
   186                                  
   187 00000128 F2450F58DC              addsd xmm11, xmm12 ; 1/r1 + 1/r2
   188                                  
   189 0000012D F2450F5ED3              divsd xmm10, xmm11 ; 1/(1/r1 + 1/r2) = R
   190                                  
   191 00000132 6A00                    push qword 0
   192 00000134 B801000000              mov rax, 1 ;used to signify we are using a value such as xmm0
   193 00000139 48BF-                   mov rdi, totalresistance ;message total resistance
   193 0000013B [E000000000000000] 
   194 00000143 F2410F10C2              movsd xmm0, xmm10 ;sets our total resistance to xmm0 which will be called in our printf
   195 00000148 E8(00000000)            call printf
   196                                  
   197 0000014D 58                      pop rax
   198                                  
   199                                  ;---------------end of math part --------------
   200                                  
   201 0000014E B800000000              mov rax, 0 
   202 00000153 48BF-                   mov rdi, computerscience ;message asking if you are a computer scientist 
   202 00000155 [0901000000000000] 
   203 0000015D E8(00000000)            call printf
   204                                  
   205                                  
   206 00000162 6A00                    push qword 0
   207 00000164 B801000000              mov rax, 1 ;we are passing in an argument to be scanned
   208 00000169 48BF-                   mov rdi, charformat ;sets up in char format since we are only taking in a 'y' or 'n'
   208 0000016B [0601000000000000] 
   209 00000173 4889E6                  mov rsi, rsp 
   210 00000176 E8(00000000)            call scanf ;sets up entering in 'y' or 'n' for yes and no
   211 0000017B 58                      pop rax
   212                                  
   213 0000017C 41BE79000000            mov r14, 'y'
   214                                  
   215 00000182 4939C6                  cmp r14, rax ;compares user input 'y' or 'n' with 'y'. If he is a computer scientist it will jump, if not he won't.
   216                                  
   217 00000185 7411                    je computer_scientist
   218                                  
   219 00000187 48B814AE47E17AC092-     mov rax, 0x4092C07AE147AE14; 1200.12 in hex
   219 00000190 40                 
   220 00000191 664C0F6EF8              movq xmm15, rax ;moves the address into xmm15
   221                                  
   222 00000196 EB20                    jmp end_of_interview ;jumps to end of interview skipping computer scientist part
   223                                  
   224                                  
   225                                  
   226                                  
   227                                  computer_scientist:
   228                                  
   229 00000198 48B848E17A140E7CF5-     mov rax, 0x40F57C0E147AE148;88000.88 in hex format, makes it so i can enter a float into a r register.
   229 000001A1 40                 
   230 000001A2 664C0F6EF8              movq xmm15, rax
   231                                  
   232                                  
   233 000001A7 EB0F                    jmp end_of_interview
   234                                  
   235                                  
   236                                  
   237                                  Chris_Sawyer:
   238 000001A9 48B80000000080842E-     mov rax, 0x412E848000000000; 1 million in hex format
   238 000001B2 41                 
   239 000001B3 664C0F6EF8              movq xmm15, rax;sets value to 1 million, which when called in main will activate chris sawyer prompt.
   240                                  
   241                                  
   242                                  
   243                                  end_of_interview:
   244 000001B8 B800000000              mov rax, 0
   245 000001BD 48BF-                   mov rdi, exitmessage ;exit message prompt.
   245 000001BF [8501000000000000] 
   246 000001C7 E8(00000000)            call printf
   247                                  
   248 000001CC F2410F10C7              movsd xmm0, xmm15 ;this will return whatever value is needed to be returned, whether it's 0 to indicate chris sawyer, 2 to indicate social major, or 88000.88 to indicate computer scientist.
   249                                  
   250 000001D1 58                      pop rax
   251                                  ;===== Restore original values to integer registers ===================================================================
   252 000001D2 9D                      popf                                                        ;Restore rflags
   253 000001D3 5B                      pop rbx                                                     ;Restore rbx
   254 000001D4 415F                    pop r15                                                     ;Restore r15
   255 000001D6 415E                    pop r14                                                     ;Restore r14
   256 000001D8 415D                    pop r13                                                     ;Restore r13
   257 000001DA 415C                    pop r12                                                     ;Restore r12
   258 000001DC 415B                    pop r11                                                     ;Restore r11
   259 000001DE 415A                    pop r10                                                     ;Restore r10
   260 000001E0 4159                    pop r9                                                      ;Restore r9
   261 000001E2 4158                    pop r8                                                      ;Restore r8
   262 000001E4 59                      pop rcx                                                     ;Restore rcx
   263 000001E5 5A                      pop rdx                                                     ;Restore rdx
   264 000001E6 5E                      pop rsi                                                     ;Restore rsi
   265 000001E7 5F                      pop rdi                                                     ;Restore rdi
   266 000001E8 5D                      pop rbp                                                     ;Restore rbp
   267                                  
   268                                  
   269                                  
   270 000001E9 C3                      ret
   271                                  
   272                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
   273                                  
   274                                  
   275                                  
   276                                  
   277                                  
   278                                  
   279                                  
